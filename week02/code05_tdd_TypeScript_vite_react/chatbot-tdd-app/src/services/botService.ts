// ğŸ¤– Step 8: Bot Service Implementation (After TDD Refactor)
// Refactored version with extracted response patterns

// Define the interface for bot responses
export interface BotResponse {
  text: string;    // The response message
  delay: number;   // Milliseconds to wait before showing response
}

// Define structure for response patterns (makes it easier to add new responses)
interface ResponsePattern {
  keywords: string[];    // Array of trigger words
  response: string;      // What to respond with
  delay: number;         // How long to wait before responding
}

// Configuration array of all possible responses (easy to maintain and extend)
const responsePatterns: ResponsePattern[] = [
  {
    keywords: ['hello', 'hi'],  // Greeting keywords
    response: "Hello! I'm a TDD-built chatbot. How can I help you today?",
    delay: 1000                 // 1 second delay
  },
  {
    keywords: ['vite'],         // Vite-related keywords
    response: "Vite is amazing! âš¡ Super fast development and builds. This bot was built using TDD!",
    delay: 800                  // Faster response for tech topics
  },
  {
    keywords: ['react'],        // React-related keywords
    response: "React with TypeScript is powerful! And with TDD, we build it right the first time. ğŸš€",
    delay: 1200                 // Slightly longer for detailed tech response
  },
  {
    keywords: ['bye'],          // Farewell keywords
    response: "Goodbye! Thanks for trying this TDD-built chatbot! ğŸ‘‹",
    delay: 600                  // Quick goodbye
  }
];

// Improved bot response function using pattern matching
export function getBotResponse(userMessage: string): BotResponse {
  // Normalize input: convert to lowercase and remove whitespace
  const message = userMessage.toLowerCase().trim();
  
  // Find the first pattern that matches any keyword in the user message
  const pattern = responsePatterns.find(p => 
    p.keywords.some(keyword => message.includes(keyword))  // Check if any keyword is found
  );
  
  // If we found a matching pattern, use it
  if (pattern) {
    return {
      text: pattern.response,
      delay: pattern.delay
    };
  }
  
  // Default response if no patterns match
  return {
    text: `You said: "${userMessage}". This response was generated by TDD-tested code! âš¡`,
    delay: 1000
  };
}